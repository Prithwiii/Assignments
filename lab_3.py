# -*- coding: utf-8 -*-
"""lab 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iFLGmGQoH4j7yzTdG9C3TPDKxlG5tSLf
"""

N=int(input())
arr1=list(map(int,input().split()))
count=0


def merge(arr1):
  global count
  if len(arr1)>1:
    mid=len(arr1)//2
    left= arr1[:mid]
    right=arr1[mid:]
    merge(left)
    merge(right)
    i=0
    j=0
    k=0

    while i<len(left) and j<len(right):
      if left[i]<right[j]:
        arr1[k]=left[i]
        i+=1


      elif left[i]>right[j]:
        arr1[k]=right[j]

        count+=(len(left)-i)
        j+=1

      k+=1

    while i<len(left):
      arr1[k]=left[i]
      i+=1
      k+=1
    while j<len(right):
      arr1[k]=right[j]
      j+=1
      k+=1


merge(arr1)

print(count)
print(*arr1)

N=int(input())
arr1=list(map(int,input().split()))



def merge(arr1):

  if len(arr1)>1:
    mid=len(arr1)//2
    left= arr1[:mid]
    right=arr1[mid:]
    merge(left)
    merge(right)
    i=0
    j=0
    k=0

    while i<len(left) and j<len(right):
      if abs(left[i])<abs(right[j]):
        arr1[k]=left[i]
        i+=1


      elif abs(left[i])>abs(right[j]):
        arr1[k]=right[j]


        j+=1

      k+=1

    while i<len(left):
      arr1[k]=left[i]
      i+=1
      k+=1
    while j<len(right):
      arr1[k]=right[j]
      j+=1
      k+=1


merge(arr1)



print(arr1[len(arr1)-2]+(arr1[len(arr1)-1])**2)

N=int(input())
arr1=list(map(int,input().split()))
max_yo=-1
i=0
#####ACCEPTEDDDDDD#####
max_sqr=1
for i in range(N-1,-1,-1):
  max_yo=max(max_yo,arr1[i]+max_sqr)
  max_sqr=max(max_sqr,arr1[i]**2)
print(max_yo)

a,b= map(int,input().split())
print((a**b)%107)

a,b= map(int,input().split())
res=1
while b>0:
  if b%2==1:
    res=(res*a)%107
  a=(a*a)%107
  b//=2
print(res)

def solve(sum):
 T= int(input())

 for i in range(T):
    a,n,m= map(int,input().split())
    sum+= ((a**n)%m)
    solve((a**n)%m)
 return sum

solve(0)

T= int(input())
res_list=[]
for i in range(T):
    a,n,m= map(int,input().split())
    if a==1:
      res_list.append(str(n%m))
      continue
    base=a
    exp=n+1
    mod=m*(a-1)
    res=1
    while exp>0:
      if exp%2==1:
        res=(res*base)%mod
      base=(base*base)%mod
      exp//=2
    num=(res-a)%mod
    final=(num//(a-1))%m
    res_list.append(str(final))
print("\n".join(res_list))

def solve():
  N= int(input())
  A= list(map(int,input().split()))
  def order(left,right):
    if left>right:          #########accepted########
      return []
    mid=(left+right)//2
    return [A[mid]]+ order(left,mid-1) + order(mid+1,right)
  result=order(0,N-1)
  print(*result)
solve()

N= int(input())
A= list(map(int,input().split()))
left=0
right=N-1
result=[]
while left<=right:

    mid=(left+right)//2
    result.append(A[mid])
    l= left
    r=mid-1
    while l<mid:
      result.append(A[l])
      l+=1
    l=mid+1
    r=right
    while l<=right:
       result.append(A[l])
       l+=1
    break
print(*result)

def postorder(in_order,pre_order):
   if not in_order:
    return []
   root=pre_order[0]
   for i in range(len(in_order)):
      if in_order[i]==root:
        idx=i
        break
   left=postorder(in_order[:idx],pre_order[1:idx+1])
   right= postorder(in_order[idx+1:],pre_order[idx+1:])
   return left+right+[root]
N=int(input())
in_order= list(map(int,input().split()))
pre_order= list(map(int,input().split()))
print(*postorder(in_order,pre_order))

def max_subarray(arr):
    max_sum = float('-inf')  # Keeps track of the maximum sum found
    current_sum = 0          # Keeps track of the sum of the current subarray
    start = end = temp_start = 0  # Indices for tracking subarray

    for i in range(len(arr)):
        if current_sum + arr[i] < arr[i]:
            # Reset condition: starting fresh from current index
            current_sum = arr[i]
            temp_start = i
        else:
            # Continue adding to the existing subarray
            current_sum += arr[i]

        if current_sum > max_sum:
            # Update max_sum and subarray indices
            max_sum = current_sum
            start = temp_start
            end = i

        print(f"Index: {i}, Score: {arr[i]}, Current Sum: {current_sum}, Max Sum: {max_sum}")      #######kadane

    return max_sum, arr[start:end+1], start, end

# Example input
scores = [-3, 7, 12, -8, -2, 83, -7, 4]
max_sum, subarray, start, end = max_subarray(scores)

print("\nMax sum:", max_sum)
print("Best segment:", subarray)
print("Start index:", start, "End index:", end)