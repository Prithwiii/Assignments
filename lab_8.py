# -*- coding: utf-8 -*-
"""lab 8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x8G0st30PuZ-lTgH-_ZlQH8nxvmXvA9-
"""

N,K= map(int,input().split())
parent=[]
for i in range(N+1):
  parent.append(i)
size=[1]*(N+1)
def find(x):
  if parent[x]!=x:
    parent[x]=find(parent[x])
  return parent[x]
def union(x,y):
  X=find(x)
  Y=find(y)
  if X!=Y:
    if size[X]<size[Y]:
      X,Y=Y,X
    parent[Y]=X
    size[X]+=size[Y]
  return size[X]


for i in range(K):
  ai,aj= map(int,input().split())

  print(union(ai,aj))

N,M= map(int,input().split())
edges=[]
for i in range(M):
  u,v,w=map(int,input().split())
  edges.append((w,u,v))
edges.sort()
parent=[]
for i in range(N+1):
  parent.append(i)
rank=[0]*(N+1)
def find(x):
  if parent[x]!=x:
    parent[x]=find(parent[x])
  return parent[x]
def union(x,y):
  X=find(x)
  Y=find(y)
  if X==Y:
    return False
  if rank[X]<rank[Y]:
    X,Y=Y,X
  parent[Y]=X
  if rank[X]==rank[Y]:
    rank[X]+=1
  return True

cost=0
used=0
for w,u,v in edges:
  if union(u,v):
    cost+=w
    used+=1
    if used==N-1:
      break
print(cost)

def second():
 N,M= map(int,input().split())
 edges=[]
 for i in range(M):
  u,v,w= map(int,input().split())
  edges.append((w,u,v,i))
 edges.sort()
 parent=[]
 for k in range(N+1):
  parent.append(k)
 rank=[0]*(N+1)


 def find(x):
  if parent[x]!=x:
    parent[x]=find(parent[x])
  return parent[x]
 def union(x,y):
  X=find(x)
  Y=find(y)
  if X==Y:
    return False
  if rank[X]<rank[Y]:
    X,Y=Y,X
  parent[Y]=X
  if rank[X]==rank[Y]:
    rank[X]+=1
  return True

 cost=0
 edges2=[]
 for w,u,v,idx in edges:
  if union(u,v):
    cost+=w
    edges2.append((w,u,v,idx))
 if len(edges2)!=N-1:
  print(-1)
  return
 best=float('inf')
 for s in edges2:

    parent2=[]
    for i in range(N+1):
       parent2.append(i)
    rank2=[0]*(N+1)
    def find2(x):
        if parent2[x]!=x:
          parent2[x]=find2(parent2[x])
        return parent2[x]
    def union2(x,y):
          X=find2(x)
          Y=find2(y)
          if X==Y:
             return False
          if rank2[X]<rank2[Y]:
              X,Y=Y,X
          parent2[Y]=X
          if rank2[X]==rank2[Y]:
                 rank2[X]+=1
          return True
    cost2=0
    count=0
    for w,u,v,idx in edges:
      if idx==s[3]:
        continue

      if union2(u,v):
        cost2+=w
        count+=1
      if count== N-1:
        break
    if count==N-1 and cost2>cost:
      best= min(best,cost2)
 if best!= float('inf'):
      print(best)
 else:
    print(-1)
second()

